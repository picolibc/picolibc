name: Zephyr

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# When a PR is updated, cancel the jobs from the previous version. Merges
# do not define head_ref, so use run_id to never cancel those jobs.
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  # .github/do-zephyr -Dfortify-source=2 --buildtype release
  # is the largest cache, 429.5M (September 2023).
  CCACHE_SIZE: "450M"
  CCACHE_CMD: ccache
  DOCKERFILE: .github/Dockerfile-zephyr
  IMAGE: ghcr.io/${{ github.repository }}
  PACKAGES_FILE: .github/zephyr-packages.txt
  EXTRA_FILE: .github/zephyr-files.txt

jobs:
  cache-maker:
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: Clone picolibc
        uses: actions/checkout@v4

      - name: Check if image needs to be rebuilt
        run: |
          set -x
          echo IMAGE_TAG=${{ hashFiles( env.DOCKERFILE, env.PACKAGES_FILE, env.EXTRA_FILE ) }} >> $GITHUB_ENV
          # https://github.com/orgs/community/discussions/26279
          GHCR_TOKEN=$(echo ${{ secrets.GITHUB_TOKEN }} | base64)
          TAGS=$(curl -s -H "Authorization: Bearer ${GHCR_TOKEN}" https://ghcr.io/v2/picolibc/picolibc/tags/list)
          echo $TAGS | jq -e '.tags|any(. == "${{ env.IMAGE_TAG }}")'  > /dev/null || echo DOCKER_NEED_BUILD=1 >> $GITHUB_ENV

      - name: Set up Docker Buildx
        if: env.DOCKER_NEED_BUILD == '1'
        uses: docker/setup-buildx-action@v3

      - name: Build image
        if: env.DOCKER_NEED_BUILD == '1'
        run: |
          pwd
          ls
          docker build . --file .github/Dockerfile-zephyr --tag $IMAGE:${{ env.IMAGE_TAG }} --label "runnumber=${GITHUB_RUN_ID}"
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin
          docker push $IMAGE:${{ env.IMAGE_TAG }}
  minsize-zephyr:
    needs: cache-maker
    runs-on: ubuntu-latest
    strategy:
      matrix:
        meson_flags: [
          "",

          # Tinystdio and math configurations, one with multithread disabled and with locale, original malloc and atexit/onexit code
          "-Dio-float-exact=false -Dio-long-long=true -Dio-percent-b=true -Dio-long-double=true -Dnewlib-obsolete-math=false -Dwant-math-errno=true -Dnewlib-multithread=false -Dnewlib-retargetable-locking=false -Dnewlib-locale-info=true -Dnewlib-locale-info-extended=true -Dnewlib-mb=true -Dnewlib-iconv-external-ccs=true -Dnewlib-nano-malloc=false -Dpicoexit=false -Dprintf-small-ultoa=true",
          "-Dformat-default=integer -Dfreestanding=true -Dposix-io=false -Dnewlib-obsolete-math=true -Dwant-math-errno=true -Dassert-verbose=false",

          # Original stdio, one with multithread disabled
          "-Dtinystdio=false",
          "-Dtinystdio=false -Dnewlib-io-float=true -Dio-long-long=true -Dio-long-double=true -Dnewlib-fvwrite-in-streamio=true -Dnewlib-multithread=false -Dnewlib-retargetable-locking=false",
        ]
        test: [
          "./.github/do-zephyr",
        ]
    steps:
      - name: Clone picolibc
        uses: actions/checkout@v4
        with:
          path: picolibc

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Load and Check the Docker Image
        run: |
          echo IMAGE_TAG=${{ hashFiles( env.DOCKERFILE, env.PACKAGES_FILE, env.EXTRA_FILE ) }} >> $GITHUB_ENV
          docker pull ${{ env.IMAGE }}:${{ env.IMAGE_TAG }}

      # The docker image contains ccache, but the ccache action uses the ccache
      # outside docker for statistics, so install the same ccache version.
      # Install in /usr/bin so the ccache action gets the expected environment.
      - name: install ccache
        if: matrix.test == './.github/do-zephyr'
        run: |
          wget -nv https://github.com/ccache/ccache/releases/download/v4.8.2/ccache-4.8.2-linux-x86_64.tar.xz
          sudo tar xf ccache-4.8.2-linux-x86_64.tar.xz -C /usr/bin --strip-components=1 --no-same-owner ccache-4.8.2-linux-x86_64/ccache
          rm -f ccache-*-linux-x86_64.tar.xz

      # Key on job name and cache size to get separate caches for linux
      # and zephyr.
      - name: ccache
        if: matrix.test == './.github/do-zephyr'
        uses: hendrikmuhs/ccache-action@v1.2.10
        with:
          key: compilation-${{ runner.os }}-${{ github.job }}-${{ matrix.meson_flags }}-${{ env.CCACHE_SIZE }}
          max-size: ${{ env.CCACHE_SIZE }}

      - name: Minsize test
        run: |
          docker run -v $(readlink -f picolibc):/picolibc -w /picolibc -v $GITHUB_WORKSPACE/.ccache:/root/.ccache $IMAGE:${{ env.IMAGE_TAG }} bash --login -c "${{ env.CCACHE_CMD }} --set-config=max_size=${{ env.CCACHE_SIZE }} && ${{ matrix.test }} ${{ matrix.meson_flags }} --buildtype minsize"

  fortify-source-zephyr:
    needs: cache-maker
    runs-on: ubuntu-latest
    strategy:
      matrix:
        meson_flags: [
          "",

          # Tinystdio and math configurations, one with multithread disabled and with locale, original malloc and atexit/onexit code
          "-Dio-float-exact=false -Dio-long-long=true -Dio-percent-b=true -Dio-long-double=true -Dnewlib-obsolete-math=false -Dwant-math-errno=true -Dnewlib-multithread=false -Dnewlib-retargetable-locking=false -Dnewlib-locale-info=true -Dnewlib-locale-info-extended=true -Dnewlib-mb=true -Dnewlib-iconv-external-ccs=true -Dnewlib-nano-malloc=false -Dpicoexit=false -Dprintf-small-ultoa=true",
          "-Dformat-default=integer -Dfreestanding=true -Dposix-io=false -Dnewlib-obsolete-math=true -Dwant-math-errno=true -Dassert-verbose=false",

          # Original stdio, one with multithread disabled
          "-Dtinystdio=false",
          "-Dtinystdio=false -Dnewlib-io-float=true -Dio-long-long=true -Dio-long-double=true -Dnewlib-fvwrite-in-streamio=true -Dnewlib-multithread=false -Dnewlib-retargetable-locking=false",
        ]
        test: [
          "./.github/do-zephyr",
        ]
    steps:
      - name: Clone picolibc
        uses: actions/checkout@v4
        with:
          path: picolibc

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Load and Check the Docker Image
        run: |
          echo IMAGE_TAG=${{ hashFiles( env.DOCKERFILE, env.PACKAGES_FILE, env.EXTRA_FILE ) }} >> $GITHUB_ENV
          docker pull ${{ env.IMAGE }}:${{ env.IMAGE_TAG }}

      # The docker image contains ccache, but the ccache action uses the ccache
      # outside docker for statistics, so install the same ccache version.
      # Install in /usr/bin so the ccache action gets the expected environment.
      - name: install ccache
        if: matrix.test == './.github/do-zephyr'
        run: |
          wget -nv https://github.com/ccache/ccache/releases/download/v4.8.2/ccache-4.8.2-linux-x86_64.tar.xz
          sudo tar xf ccache-4.8.2-linux-x86_64.tar.xz -C /usr/bin --strip-components=1 --no-same-owner ccache-4.8.2-linux-x86_64/ccache
          rm -f ccache-*-linux-x86_64.tar.xz

      # Key on job name and cache size to get separate caches for linux
      # and zephyr.
      - name: ccache
        if: matrix.test == './.github/do-zephyr'
        uses: hendrikmuhs/ccache-action@v1.2.10
        with:
          key: compilation-${{ runner.os }}-${{ github.job }}-${{ matrix.meson_flags }}-${{ env.CCACHE_SIZE }}
          max-size: ${{ env.CCACHE_SIZE }}

      - name: Fortify source test
        run: |
          docker run -v $(readlink -f picolibc):/picolibc -w /picolibc -v $GITHUB_WORKSPACE/.ccache:/root/.ccache $IMAGE:${{ env.IMAGE_TAG }} bash --login -c "${{ env.CCACHE_CMD }} --set-config=max_size=${{ env.CCACHE_SIZE }} && ${{ matrix.test }} ${{ matrix.meson_flags }} -Dfortify-source=2 --buildtype release"

