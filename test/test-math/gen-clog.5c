/*
 * SPDX-License-Identifier: BSD-3-Clause
 *
 * Copyright Â© 2025 Keith Packard
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 */

load "gen-complex.5c"

complex_ulp_t[4] max_ulp = {
	{ .r = 1, .a = 1 },
	{ .r = 1, .a = 2 },
	{ .r = 1, .a = 2 },
	{ .r = 2, .a = 2 },
};

complex_t clog(complex_t x)
{
	return (complex_t) {
		.r = log(sqrt(x.r*x.r + x.i*x.i)),
		.i = atan2(x.i, x.r)
	};
}

void
main()
{
	real to_rad = pi_value(prec) / imprecise(180, prec);

	compute_complex_one(from_rect(0x1.1eaf08d56b8c3p+0, 0x1.87fea88b13aaep-5), clog, max_ulp);
	compute_complex_one(from_rect(0x1.87fea88b13aaep-5, 0x1.1eaf08d56b8c3p+0), clog, max_ulp);
	for (real r = .1; r < 1e2; r *= 11) {
		real ri = imprecise(r, prec);
		for (real a = 2; a < 360; a += 15) {
			real 		ai = imprecise(a, prec);
			complex_t	x = from_polar(ri, ai * to_rad);
			compute_complex_one(x, clog, max_ulp);
		}
	}
}

main();
